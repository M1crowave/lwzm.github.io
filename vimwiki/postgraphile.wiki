= PostGraphile =

* https://www.graphile.org/postgraphile/security/
* https://www.graphile.org/postgraphile/smart-tags/#primarykey
* https://www.graphile.org/postgraphile/views/#authorization
* https://www.graphile.org/postgraphile/jwt-guide/#example

{{{sql
drop function if exists jwt(integer);

create function jwt(i int) returns text language plpython3u stable as $$
import time
import jwt

now = int(time.time())
encoded = jwt.encode({"i": i, "iat": now, "exp": now + 86400 * 30}, "x")
return "Bearer " + encoded
$$;
}}}


{{{sql
drop function if exists current_user_id() cascade;

create function current_user_id() returns int language sql stable as $$
  select current_setting('jwt.claims.i', true)::int;
$$;

create view u as
 select * from "user" where id < current_user_id();
comment on view u is '@primaryKey id';

comment on view v is '
@primaryKey id
@foreignKey (user) references u (id)|@foreignFieldName vs|@fieldName u
';

comment on constraint fk_group_user__group on group_user is '
@manyToManyFieldName groups
';

drop view user_all_groups;
create view user_all_groups as
select distinct u.id as user, g2.id as group 
from "user" as u
join group_user as x on u.id = x.user
join "group" as g on x.group = g.id
join "group" as g2 on g.name = g2.name or g2."name" like g."name" || '/%'
;
comment on view user_all_groups is '
@foreignKey (user) references user(id)
@foreignKey (group) references group(id)|@manyToManyFieldName allGroups
';

}}}
