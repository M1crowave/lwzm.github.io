= Docker =

https://hub.docker.com/

入门教程 https://docker_practice.gitee.io/

与 `CoreOS` 搭配更佳。如果需要升级，使用：

{{{sh
update_engine_client -update
}}}

然后重启完成升级。

CoreOS 需要 SELINUX，不然会有奇怪的错误。
{{{sh
vi /etc/selinux/config 

SELINUX=enforcing
}}}


=== 常用工具 ===

* portainer https://www.portainer.io/installation/
* ctop https://github.com/bcicen/ctop

=== 基础镜像 ===

* alpine
* debian:buster-slim
* debian:stretch-slim

=== 常用容器 ===

portainer:

{{{sh
docker volume create portainer_data
docker run -d -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer
}}}

htop:

{{{sh
docker run -it --name=htop --pid=host jonbaldie/htop
docker run -it --rm --pid=container:XXX jonbaldie/htop
}}}

ctop:

{{{sh
docker run -it -v /var/run/docker.sock:/var/run/docker.sock:ro quay.io/vektorlab/ctop
}}}

nginx:

{{{sh
docker volume create www
docker run -p 8080:80 -v www:/usr/share/nginx/html:ro -d nginx:alpine
}}}

gogs:

{{{sh
docker pull gogs/gogs:0.11.86
docker volume create gogs
docker run -p 22:22 -p 3000:3000 gogs/gogs:0.11.86
}}}

/dev/mqueue:

{{{sh
docker run -it --ipc=host alpine sh

docker run -it --name=main alpine sh
docker run -it --ipc=container:main alpine sh
}}}

=== alpine gcc ===

{{{sh
sed -i 's/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g' /etc/apk/repositories
apk add --no-cache gcc musl-dev
}}}

=== /opt/bin ===

可以把 docker 容器启动的工具放这里，如 `htop`, `ctop`

{{{sh
docker start -ia $(basename $0)
}}}


=== Dockerfile for Python ===

{{{Dockerfile
FROM python:stretch as base

RUN apt-get update
RUN apt-get install -y libev-dev \
    && pip install -i https://pypi.douban.com/simple --user \
        gunicorn falcon pycrypto pyyaml requests redis pymysql pony

FROM python:slim-stretch
COPY --from=base /root/.local /root/.local
ENV PATH /root/.local/bin:${PATH}

WORKDIR /root/
EXPOSE 8000

COPY .gunicorn cfg.yaml *.py ./

CMD [ "gunicorn", "-c", ".gunicorn", "xxx" ]
}}}

还有一种方法生成的镜像更小，`pyinstaller` 打包结果 + `debian:stretch-slim`，浅尝可用。
理论上可以用 pyinstaller on alpine，但是安装时失败，算了。

{{{sh
pyinstaller your-script.py
# or
PYTHONOPTIMIZE=2 pyinstaller -y -s your-script.py
}}}

生成的文件有部分不是必须的，如
* `*lzma*`
* `*readline*`
* `libcrypto.so.*`
视情况和心情剔除。

剩下的举例：
{{{sh
_bisect.cpython-37m-x86_64-linux-gnu.so
_blake2.cpython-37m-x86_64-linux-gnu.so
_heapq.cpython-37m-x86_64-linux-gnu.so
_md5.cpython-37m-x86_64-linux-gnu.so
_pickle.cpython-37m-x86_64-linux-gnu.so
_queue.cpython-37m-x86_64-linux-gnu.so
_random.cpython-37m-x86_64-linux-gnu.so
_sha1.cpython-37m-x86_64-linux-gnu.so
_sha256.cpython-37m-x86_64-linux-gnu.so
_sha3.cpython-37m-x86_64-linux-gnu.so
_sha512.cpython-37m-x86_64-linux-gnu.so
_struct
_struct.cpython-37m-x86_64-linux-gnu.so
base_library.zip
libpython3.7m.so
libz.so.1
math.cpython-37m-x86_64-linux-gnu.so
posix_ipc.cpython-37m-x86_64-linux-gnu.so
ts
zlib
zlib.cpython-37m-x86_64-linux-gnu.so
}}}

极限控制镜像包大小，先用 `pyinstaller` 打包，然后从 `debian:stretch-slim` 拷贝出 `lib` `lib64`，和 `pyinstaller` 打包出的文件夹一起打一个 `tgz`：

{{{sh
tar czf XXX.tgz lib* XXX
}}}

如何极限精简打包，参考 https://gist.github.com/lwzm/f3dfb447f7927b78d70c040aa1c3a5e1

最后：

{{{Dockerfile
FROM debian:stretch-slim as base
RUN mkdir /x && cp -a /lib* /tmp /x
FROM scratch
COPY --from=base /x /
COPY /t /app
CMD /app/t
}}}

上述方法打出来的镜像，可比肩 Golang，但是对代码质量和系统细节的掌控的要求比较高。

=== docker compose ===

把 nginx 和其它几个 web 服务放一起，例子：

{{{yaml
version: '3'
services:

  nginx:
    image: nginx:alpine
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/ssl/certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt:ro
      - ./log:/var/log
      - ./nginx-conf.d:/etc/nginx/conf.d
    ports: 
      - "80:80"
      - "443:443"
    depends_on:
      - portainer
      - gogs
      - filebrowser
      - rancher

  portainer:
    image: portainer/portainer
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ./portainer:/data

  gogs:
    image: gogs/gogs:0.11.86
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./gogs:/data
    ports: 
      - "22:22"

  filebrowser:
    image: filebrowser/filebrowser
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./filebrowser/srv:/srv
      - ./filebrowser/database.db:/database.db

  rancher:
    image: rancher/rancher:stable
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./rancher:/var/lib/rancher
}}}


附 nginx 相关配置：

{{{conf
upstream gogs {
    server gogs:3000;
    keepalive 64;
}

server {
    server_name  git.* gogs.*;
    #listen       80;
    listen       443 ssl http2;

    location / {
        proxy_pass http://gogs;
    }
}
}}}

{{{conf
upstream portainer {
    server portainer:9000;
    keepalive 64;
}

server {
    server_name  portainer.*;
    #listen       80;
    listen       443 ssl http2;

    # for websocket, do not ignore any line
    proxy_http_version 1.1;
    proxy_connect_timeout 2;
    proxy_read_timeout 300;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Port $server_port;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header Connection "upgrade";
    proxy_set_header Upgrade $http_upgrade;

    location / {
        proxy_pass http://portainer;
    }
}
}}}
