= Docker =

https://hub.docker.com/

入门教程 https://docker_practice.gitee.io/

与 `CoreOS` 搭配更佳。如果需要手动强制升级，使用：

{{{sh
update_engine_client -update
}}}

然后重启完成升级。

CoreOS 需要 SELINUX，不然会有奇怪的错误。
{{{sh
vi /etc/selinux/config 

SELINUX=permissive
SELINUXTYPE=mcs
}}}

CoreOS系统经常自动重启，原因是系统自动升级，如不需要自动重启，编辑 `/etc/coreos/update.conf`
{{{conf
REBOOT_STRATEGY=off
}}}

然后
{{{sh
systemctl restart update-engine
}}}

但是后来好像还是自动重启了，干脆关了吧：

{{{sh
systemctl stop update-engine
systemctl disable update-engine
}}}

=== /var/lib/docker/ ===

这是工作目录，images 和 containers 都在这里，可以考虑迁移到速度快容量大的磁盘。

=== /var/run/docker.sock ===

CentOS 或 Debian 的普通用户使用时，需要 docker 组的权限：
{{{sh
usermod -a -G docker YOU
}}}

=== 常用工具 ===

* [[https://docs.docker.com/compose/install/|docker-compose]]
* toolbox
* [[https://www.portainer.io/installation/|portainer]]
* [[https://github.com/bcicen/ctop|ctop]]
* [[https://traefik.io/|traefik]]

{{{sh
curl -L "https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose

# https://github.com/bcicen/ctop/releases
wget https://github.com/bcicen/ctop/releases/download/v0.7.2/ctop-0.7.2-linux-amd64 -O /usr/local/bin/ctop

chmod +x /usr/local/bin/*
}}}

=== 基础镜像 ===

* busybox
* alpine
* debian:buster-slim
* debian:stretch-slim

=== 常用容器 ===

* htop `docker run -it --name=htop --pid=host lwzm/htop`
* portainer
* nginx


=== /dev/mqueue: ===

option: `--ipc`

{{{sh
docker run -it --ipc=host alpine sh

docker run -it --name=main alpine sh
docker run -it --ipc=container:main alpine sh
}}}

=== alpine gcc ===

{{{sh
sed -i 's/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g' /etc/apk/repositories
apk add --no-cache gcc musl-dev
}}}


=== /opt/bin ===

可以把 docker 容器启动的工具放这里，如 `htop`, `ctop`

{{{sh
docker start -ia $(basename $0)
}}}


=== Dockerfile for Python ===

如果需要处理出现的僵尸进程，参考 [[https://github.com/krallin/tini|Tini]]。

{{{Dockerfile
FROM python:stretch as base

RUN apt-get update
RUN apt-get install -y libev-dev \
    && pip install -i https://pypi.douban.com/simple --user \
        gunicorn falcon pycrypto pyyaml requests redis pymysql psycopg2-binary pony

FROM python:slim-stretch
WORKDIR /root/
COPY --from=base /root/.local .local
COPY .gunicorn cfg.yaml *.py ./
EXPOSE 8000
ENV PATH /root/.local/bin:${PATH}
CMD [ "gunicorn", "-c", ".gunicorn", "xxx" ]
}}}

还有一种方法生成的镜像更小，`pyinstaller` 打包结果 + `debian:stretch-slim`，浅尝可用。
理论上可以用 pyinstaller on alpine，但是安装时失败，算了。

{{{sh
pyinstaller your-script.py
# or
PYTHONOPTIMIZE=2 pyinstaller -y -s your-script.py
}}}

生成的文件有部分不是必须的，如
* `*lzma*`
* `*readline*`
* `libcrypto.so.*`
视情况和心情剔除。

剩下的举例：
{{{sh
_bisect.cpython-37m-x86_64-linux-gnu.so
_blake2.cpython-37m-x86_64-linux-gnu.so
_heapq.cpython-37m-x86_64-linux-gnu.so
_md5.cpython-37m-x86_64-linux-gnu.so
_pickle.cpython-37m-x86_64-linux-gnu.so
_queue.cpython-37m-x86_64-linux-gnu.so
_random.cpython-37m-x86_64-linux-gnu.so
_sha1.cpython-37m-x86_64-linux-gnu.so
_sha256.cpython-37m-x86_64-linux-gnu.so
_sha3.cpython-37m-x86_64-linux-gnu.so
_sha512.cpython-37m-x86_64-linux-gnu.so
_struct
_struct.cpython-37m-x86_64-linux-gnu.so
base_library.zip
libpython3.7m.so
libz.so.1
math.cpython-37m-x86_64-linux-gnu.so
posix_ipc.cpython-37m-x86_64-linux-gnu.so
ts
zlib
zlib.cpython-37m-x86_64-linux-gnu.so
}}}

极限控制镜像包大小，先用 `pyinstaller` 打包，然后从 `debian:stretch-slim` 拷贝出 `lib` `lib64`，和 `pyinstaller` 打包出的文件夹一起打一个 `tgz`：

{{{sh
tar czf XXX.tgz lib* XXX
}}}

如何极限精简打包，参考 https://gist.github.com/lwzm/f3dfb447f7927b78d70c040aa1c3a5e1

最后：

{{{Dockerfile
FROM debian:stretch-slim as base
RUN mkdir /x && cp -a /lib* /tmp /x
FROM scratch
COPY --from=base /x /
COPY /t /app
CMD /app/t
}}}

上述方法打出来的镜像，可比肩 Golang，但是对代码质量和系统细节的掌控的要求比较高。

=== CAfile ===

容器访问 HTTPS 时，需要各种根证书，一般是基于原始系统的基本镜像，安装类似 `ca-certificates` 的包，
也可以自己挂载本机的 CAfile，如宿主机 Debian：

{{{yaml
...
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/ssl/certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt:ro
...
}}}

参考：

* https://golang.org/src/crypto/x509/root_linux.go
* https://hub.docker.com/r/portainer/base/dockerfile
* `curl -v https://example.com/ 2>&1 >/dev/null | grep CAfile` 


=== compose ===

[[docker-compose]]

=== swarm ===

https://docs.docker.com/engine/reference/commandline/swarm/

涉及到的子命令：
* `swarm`
* `node`
* `service`
* `stack`

* https://docs.docker.com/engine/swarm/swarm-tutorial/
* https://docs.docker.com/engine/swarm/stack-deploy/
* https://docs.docker.com/compose/compose-file/
* https://docker_practice.gitee.io/zh-cn/swarm_mode/stack.html
* https://blog.fundebug.com/2017/05/08/docker-swarm-suggestion/
* https://www.bookstack.cn/read/docker-swarm-guides/README.md

portainer 和 swarm 对接比较好，大部分信息都能看到，不用 agent 模式，在主 manage 上也可以用。
