= SSH =

=== /etc/ssh/sshd_config ===

{{{
UseDNS no
Port 6NNNN
ClientAliveInterval 60
ClientAliveCountMax 3
PermitRootLogin without-password
GatewayPorts clientspecified
}}}

=== ~/.ssh/config ===

{{{
GSSAPIAuthentication no
StrictHostKeyChecking no
Compression yes
ServerAliveInterval 60
ServerAliveCountMax 2
}}}

=== ssh proxy ===

参考 `ProxyJump` 选项，可以实现跳转，跳板机可以多个，ssh client 配置以本地为准，dns 以跳板机为准。

最佳实践：搞一台跳板机，并设置好 `/etc/hosts`，公钥分别部署到各机器，就可以通过跳板机中转登录到各机器。

优点：
* hosts 统一在跳板机设置，所有人都能用到其中的别名
* 其它各机器可以只有内网，与跳板机联通即可
* 可以设置其它各机器只允许跳板机过来连接，保证高度隐私
* 方便权限管理，跳板机权限仅代表入口权限，其它机器的权限可以自由配置
* 跳板机的登录用户(e.g. foo)可以最小权限化，大家都用这一个用户也可，`yes $(which nologin) | chsh foo`

=== sshfs ===

{{{
yum install sshfs
chmod +s $(which sshfs)  # 方便普通用户

# 挂载
sshfs HOST:DIR MNT

# 如果需要符号链接可用
sshfs HOST:DIR MNT -o follow_symlinks

# 卸载
fusermount -u test/mnt
}}}

macOS 也可以用，但要首先

{{{sh
brew cask install osxfuse
}}}

=== systemd ===

有的系统使用 `systemd` 来替代 `sshd` 的监听功能，也就是 sshd.socket，若还没摸透，可以考虑不用它。

{{{sh
systemctl mask --now sshd.socket
systemctl enable sshd.service
systemctl restart sshd.service
}}}

尝试使用 `sshd.socket`

{{{sh
systemctl enable sshd.socket
systemctl disable sshd.service
cd /etc/systemd/system && cp sockets.target.wants/sshd.socket .
# find and edit sshd.socket -> ListenStream=NN
systemctl daemon-reload
systemctl restart sshd.socket
}}}

参考：https://coreos.com/os/docs/latest/customizing-sshd.html
