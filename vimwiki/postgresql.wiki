= PostgreSQL =

=== yum source ===

http://yum.postgresql.org/repopackages.php

{{{
yum install postgresql-server
# Python 的包 psycopg2 要 devel
yum install postgresql-devel
# 不装 devel 也可以，pip install psycopg2-binary
}}}

启动服务

{{{
/usr/pgsql-11/bin/postgresql-11-setup initdb
systemctl enable postgresql
systemctl start postgresql
}}}

安装好后, 先切换到 postgres 用户, 用来创建其他用户的库，并创建同名的数据库
{{{
su postgres
cd
createuser q
createdb q
}}}


=== 工作目录 ===

`/var/lib/pgsql/data/`

`/var/lib/pgsql/<VERSION>/data/`

`postgresql.conf` 基础配置

{{{
listen_addresses = '*'
fsync = off

# 日志相关配置，可选
log_destination = 'csvlog'
log_filename = '%m-%d'
log_statement = 'mod'
log_min_duration_statement = 0
log_connections = on
log_disconnections = on

}}}


`pg_hba.conf` 登录配置
{{{plain
local   all         all                               trust
host    all         all         127.0.0.1/32          trust
host    all         all         ::1/128               trust
host    all         all         172.16.16.0/24        trust
host    replication all         172.16.16.0/24        trust

host    all         all         0.0.0.0/0             md5
}}}

=== 密码管理 ===

{{{sql
CREATE USER foo WITH PASSWORD 'bar';
ALTER USER q WITH PASSWORD 'xxxx';
}}}

=== 备份和恢复 ===

最直观的就是用 `COPY` 命令了

https://www.postgresql.org/docs/current/sql-copy.html

有时候为了避免 postgres 用户权限不够的问题，可以用 `STDIN/STDOUT`
{{{sh
psql >db_backup/$(date +"%Y-%m-%dT%H:%M:%S").txt <<EOF
COPY "user" TO STDOUT;
COPY "keyword" TO STDOUT;
EOF

# or

psql >db_backup/$(date +"%Y-%m-%dT%H:%M:%S").csv <<EOF
COPY "user" TO STDOUT WITH CSV;
COPY "keyword" TO STDOUT WITH CSV;
EOF
}}}


=== 自动时间戳 ===

假设我们用 `ts` 命名时间戳

create time：

{{{psql
create table TTTT {
    ...
    ts timestamptz default now()
}
}}}

update time:

{{{sql
create or replace function update_column_ts() returns trigger
language 'plpgsql'
as $$
begin
    new.ts = now();
    return new;
end
$$;

create trigger update_TTTT_ts
before update on TTTT
for each row
    execute procedure
    update_column_ts();
}}}

参考 https://www.revsys.com/tidbits/automatically-updating-a-timestamp-column-in-postgresql/

=== 记录修改历史 ===

记录增删改

{{{sql
create table history (
    id bigserial primary key,
    tb varchar(64),
    op varchar(16),
    ref integer,
    ts timestamptz default now()
);

create or replace function history() returns trigger
language 'plpgsql'
as $$
declare
row record;
begin
    if (TG_OP = 'DELETE') then
        row := OLD;
    else
        row := NEW;
    end if;
    insert into history (tb, op, ref) values (TG_TABLE_NAME, TG_OP, row.id);
    return row;
end
$$;

create trigger history_t
after insert or update or delete
on t
for each row
    execute procedure
    history();
}}}

针对某表的某列专门做记录, 如记录 q.gold 的变化, 并且变化时必须带上 tip

{{{sql
drop table if exists history_gold;
drop table if exists q;
create table q (
    id serial primary key,
    name varchar(32),
    gold bigint default 0,
    tip varchar(256)
);
create table history_gold (
    q integer references q (id),
    before bigint,
    after bigint,
    tip varchar(256),
    ts timestamptz default now()
);

-- https://www.postgresql.org/docs/current/plpgsql-errors-and-messages.html
-- https://www.postgresql.org/docs/current/sql-createtrigger.html
-- https://www.postgresql.org/docs/current/plpgsql-trigger.html
create or replace function fn_history_gold() returns trigger
language 'plpgsql'
as $$
begin
    if (new.tip is null) then
        raise 'tip is required';
    end if;
    insert into history_gold (q, before, after, tip) values (new.id, old.gold, new.gold, new.tip);
    new.tip = null;  -- reset
    return new;
end
$$;

create trigger tg_history_gold
create trigger tg_history_gold
before update of gold on q
for each row
    execute procedure
    fn_history_gold();

-- strict permission, only read & append
REVOKE ALL ON TABLE history_gold FROM "you";
GRANT SELECT ON TABLE history_gold TO "you";
GRANT INSERT ON TABLE history_gold TO "you";

insert into q (name) values('q');
insert into q (name) values('q');
insert into q (name) values('q');
update q set gold = gold + 1, tip='test';
update q set tip='test';
update q set gold = gold + 1;
select * from history_gold;
select * from q;
}}}


如果需要定期清理并归档，参考以下代码(已通过高并发情况下数据完整性测试)

{{{sql
begin transaction;
lock table history_gold in exclusive mode;
copy history_gold to stdout;
truncate history_gold;
commit;
}}}

{{{sh
psql -q <xxx.sql >>$(date +"%Y-%m-%d").history
}}}

=== 编写动态触发器 ===

参考：https://wiki.postgresql.org/wiki/PL/pgSQL_Dynamic_Triggers

{{{sql
CREATE OR REPLACE FUNCTION dynamic_trigger()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
DECLARE
    r RECORD;
    s TEXT;
BEGIN
    RAISE NOTICE E'\n    Operation: %\n    Schema: %\n    Table: %',
        TG_OP,
        TG_TABLE_SCHEMA,
        TG_TABLE_NAME;
    FOR r IN
        SELECT ordinal_position, column_name, data_type
        FROM information_schema.columns
        WHERE
            table_schema = TG_TABLE_SCHEMA
        AND table_name = TG_TABLE_NAME
        ORDER BY ordinal_position
    LOOP
        EXECUTE 'SELECT ($1).' || r.column_name || '::text' INTO s USING NEW;
        RAISE NOTICE E'Column\n    number: %\n    name: %\n    type: %\n    value: %',
            r.ordinal_position,
            r.column_name,
            r.data_type,
            s;
    END LOOP;
    RETURN NEW;
END;
$$;
}}}

主要是用到了 `EXECUTE`，下面来看高级用法：适配绝大部分表的历史记录触发器
{{{sql
drop table if exists q;
create table q (
    id serial primary key,
    name varchar(32),
    gold bigint default 0,
    tip varchar(256)
);

drop table if exists history_update;
create table history_update (
    tab varchar(64),  -- table
    ref varchar(64),  -- foreign primary key
    col varchar(64),  -- column target
    old text,
    new text,
    ts timestamptz default now()
);

create or replace function history_update() returns trigger
language 'plpgsql'
as $$
declare
ref text;
col text;
begin
    ref := TG_ARGV[0];
    col := TG_ARGV[1];
    
    execute
    format('insert into history_update (tab, ref, col, old, new) values ($1, $4."%s", $2, $3."%s", $4."%s")', ref, col, col)
    using TG_TABLE_NAME, col, OLD, NEW;
    
    return NEW;
end
$$;


create trigger tg_
after update of gold on q
for each row
    execute procedure
    history_update(id, gold);
insert into q (name) values('q');
insert into q (name) values('q');
insert into q (name) values('q');
update q set gold = gold + 1;
update q set gold = gold + 5;
select * from history_update;
}}}

=== update 操作的 diff 记录 ===
{{{sql

-- useful diff function
CREATE OR REPLACE FUNCTION json_diff(l JSON, r JSON) RETURNS JSON AS
$$
    SELECT json_object_agg(a.key, a.value) FROM
    (SELECT key, value FROM jsonb_each(l::jsonb)) a LEFT OUTER JOIN
    (SELECT key, value FROM jsonb_each(r::jsonb)) b ON a.key = b.key
    WHERE a.value != b.value OR b.key IS NULL;
$$ LANGUAGE sql;


create table history_update (
    tb varchar(32),
    pk varchar(64),  -- just record id or ids, as string
    before jsonb,
    after jsonb,
    ts timestamptz default now()
);

create or replace function history_update() returns trigger
language 'plpgsql'
as $$
declare
x   json;
y   json;
pk  text;
arg text;
tmp text;
begin
    x  := row_to_json(old);
    y  := row_to_json(new);
    pk := '';

    FOREACH arg IN ARRAY TG_ARGV LOOP
        EXECUTE 'SELECT ($1).' || arg || '::text' INTO tmp USING old;
        pk := pk || ',' || tmp;
    END LOOP;
    pk := trim(',' from pk);

    insert into history_update (tb, pk, before, after)
                        values (TG_TABLE_NAME, pk, json_diff(x, y), json_diff(y, x));
    return new;
end
$$;

drop trigger history_update on t;
create trigger history_update
after update
on t
for each row
    execute procedure
    history_update(id); -- or multi primary keys: history_update(id, s);

}}}

=== 插件系统 ===

{{{
pip install pgxnclient
pgxn install safeupdate

vi /var/lib/pgsql/9.6/data/postgresql.conf
shared_preload_libraries=safeupdate
}}}

=== fdw ===

`file_fdw` https://www.postgresql.org/docs/current/file-fdw.html 了解一下

{{{sql
CREATE EXTENSION file_fdw;
CREATE SERVER fdw FOREIGN DATA WRAPPER file_fdw;
CREATE FOREIGN TABLE t (
  name text,
  age integer
) SERVER fdw
OPTIONS (
    filename '/home/q/test/t.txt'
);
ALTER TABLE t OWNER TO q;
}}}

{{{shell
echo 'foo\t10' >> t.txt
}}}

与 nginx 输出日志配合的例子，记录字段（ ts ip request status length sent time upstream referer uid ua ）

{{{sql
CREATE FOREIGN TABLE day27 (
    ts timestamptz,
    ip text,
    request text,
    status integer,
    length integer,
    sent integer,
    time real,
    upstream text,
    referer text,
    uid text,
    ua text
)
SERVER fdw
OPTIONS (
    filename '/var/log/nginx/days/27'
);
}}}

{{{nginx
log_format
tsv
escape=json
'$time_iso8601\t'
'$remote_addr\t'
'$request\t'
'$status\t'
'$request_length\t'
'$body_bytes_sent\t'
'$request_time\t'
'$upstream_addr\t'
'$http_referer\t'
'$cookie_uid\t'
'$http_user_agent'
;

server {
    ...

    if ($time_iso8601 ~ "^.{8}(\d{2})") {
        set $day $1;
    }
    access_log /var/log/nginx/days/$day tsv;

    ...
}
}}}

{{{sh
# 日志权限开放
usermod -a -G nginx postgres
chmode 750 /var/log/nginx/
}}}

批量创建表，31 天的表

{{{sh
function tpl() {
    echo "
DROP FOREIGN TABLE IF EXISTS day$1;
CREATE FOREIGN TABLE day$1 (
    ts timestamptz,
    ip text,
    request text,
    status integer,
    length integer,
    sent integer,
    time real,
    upstream text,
    referer text,
    uid text,
    ua text
)
SERVER fdw
OPTIONS (
    filename '/var/log/nginx/days/$1'
);
ALTER TABLE day$1 OWNER TO q;
GRANT SELECT ON TABLE day$1 TO web_anon;
    "
}

for i in $(seq -f "%02g" 31); do
    tpl $i
done
}}}

=== 通信 LISTEN/NOTIFY ===

https://www.postgresql.org/docs/current/sql-listen.html


=== 主备 master-standby ===

仅做参考，具体问题具体学习分析。

主机 postgresql.conf
{{{
wal_level = hot_standby
max_wal_senders = 8
}}}

主机 pg_hba.conf 不要漏了
{{{
host    replication all         172.16.16.0/24        trust
}}}

备机 postgresql.conf

{{{
hot_standby = on
}}}

备机 recovery.conf
{{{
standby_mode = on
primary_conninfo = 'host=<MASTER_HOST>'
}}}

初始化操作
{{{
# -> psql
$ -> shell

# select pg_start_backup('flag_name');
$ tar czf /tmp/pg_bak.tgz data/

把 pg_bak.tgz 拷贝到备机, 解压, 当作备机的数据库主目录, 修改好配置文件, 启动备机. 最后, 主机结束备份状态:

# select pg_stop_backup();
}}}
