= PostgreSQL =

=== yum source ===

http://yum.postgresql.org/repopackages.php

{{{
yum install postgresql-server
# Python 的包 psycopg2 要 devel
yum install postgresql-devel
}}}

启动服务

{{{
systemctl enable postgresql
systemctl start postgresql
}}}

安装好后, 先切换到 postgres 用户, 用来创建其他用户
{{{
su postgres
cd
createuser q
}}}

再切换回 q 用户, 创建同名的数据库, 方便使用
{{{
createdb  # 不指定数据库名表示创建同名数据库
psql
}}}

=== 工作目录 ===

`/var/lib/pgsql/data/`

`/var/lib/pgsql/<VERSION>/data/`

`postgresql.conf` 基础配置

{{{
listen_addresses = '*'
fsync = off

# 日志相关配置，可选
log_destination = 'csvlog'
log_filename = '%m-%d'
log_statement = 'mod'
log_min_duration_statement = 0
log_connections = on
log_disconnections = on

}}}


`pg_hba.conf` 登录配置
{{{plain
local   all         all                               trust
host    all         all         127.0.0.1/32          trust
host    all         all         ::1/128               trust
host    all         all         172.16.16.0/24        trust
host    replication all         172.16.16.0/24        trust

host    all         all         0.0.0.0/0             md5
}}}

=== 密码管理 ===

{{{sql
CREATE USER foo WITH PASSWORD 'bar';
ALTER USER q WITH PASSWORD 'xxxx';
}}}

=== 备份和恢复 ===

最直观的就是用 `COPY` 命令了

https://www.postgresql.org/docs/current/sql-copy.html

有时候为了避免 postgres 用户权限不够的问题，可以用 `STDIN/STDOUT`
{{{sh
psql >db_backup/$(date +"%Y-%m-%dT%H:%M:%S").txt <<EOF
COPY "user" TO STDOUT;
COPY "keyword" TO STDOUT;
EOF

# or

psql >db_backup/$(date +"%Y-%m-%dT%H:%M:%S").csv <<EOF
COPY "user" TO STDOUT WITH CSV;
COPY "keyword" TO STDOUT WITH CSV;
EOF
}}}


=== 自动时间戳 ===

假设我们用 `ts` 命名时间戳

create time：

{{{psql
create table TTTT {
    ...
    ts timestamp with time zone default now()
}
}}}

update time:

{{{sql
create or replace function update_column_ts() returns trigger
language 'plpgsql'
as $$
begin
    new.ts = now();
    return new;
end
$$;

create trigger update_TTTT_ts
before update on TTTT
for each row
    execute procedure
    update_column_ts();
}}}

参考 https://www.revsys.com/tidbits/automatically-updating-a-timestamp-column-in-postgresql/

=== 记录修改历史 ===

{{{sql
create table history (
    id bigserial primary key,
    tb varchar(64),
    op varchar(16),
    ref integer,
    ts timestamp with time zone default now()
);

create or replace function history() returns trigger
language 'plpgsql'
as $$
declare
row record;
begin
    if (TG_OP = 'DELETE') then
        row := OLD;
    else
        row := NEW;
    end if;
    insert into history (tb, op, ref) values (TG_TABLE_NAME, TG_OP, row.id);
    return row;
end
$$;

create trigger history_t
after insert or update or delete
on t
for each row
    execute procedure
    history();
}}}


=== 插件系统 ===

{{{
pip install pgxnclient
pgxn install safeupdate

vi /var/lib/pgsql/9.6/data/postgresql.conf
shared_preload_libraries=safeupdate
}}}

=== fdw ===

`file_fdw` https://www.postgresql.org/docs/current/file-fdw.html 了解一下

{{{sql
CREATE EXTENSION file_fdw;
CREATE SERVER fdw FOREIGN DATA WRAPPER file_fdw;
CREATE FOREIGN TABLE t (
  name text,
  age integer
) SERVER fdw
OPTIONS (
    filename '/home/q/test/t.txt'
);
ALTER TABLE t OWNER TO q;
}}}

{{{shell
echo 'foo\t10' >> t.txt
}}}

与 nginx 输出日志配合的例子

{{{sql
CREATE FOREIGN TABLE day27 (
    ts timestamp with time zone,
    remote_addr text,
    request text,
    status integer,
    request_length integer,
    body_bytes_sent integer,
    request_time float,
    upstream_addr text,
    http_referer text,
    http_user_agent text
)
SERVER fdw
OPTIONS (
    filename '/var/log/nginx/days/27'
);
}}}

{{{nginx
log_format
tsv
escape=json
'$time_iso8601\t'
'$remote_addr\t'
'$request\t'
'$status\t'
'$request_length\t'
'$body_bytes_sent\t'
'$request_time\t'
'$upstream_addr\t'
'$http_referer\t'
'$http_user_agent'
;

server {
    ...

    if ($time_iso8601 ~ "^.{8}(\d{2})") {
        set $day $1;
    }
    access_log /var/log/nginx/days/$day tsv;

    ...
}
}}}

{{{sh
# 日志权限开放
usermod -a -G nginx postgres
chmode 750 /var/log/nginx/
}}}

批量创建表，31 天的表

{{{sh
function tpl() {
    echo "
DROP FOREIGN TABLE IF EXISTS day$1;
CREATE FOREIGN TABLE day$1 (
    ts timestamp with time zone,
    remote_addr text,
    request text,
    status integer,
    request_length integer,
    body_bytes_sent integer,
    request_time real,
    upstream_addr text,
    http_referer text,
    http_user_agent text
)
SERVER fdw
OPTIONS (
    filename '/var/log/nginx/days/$1'
);
ALTER TABLE day$1 OWNER TO q;
    "
}

for i in $(seq -f "%02g" 31); do
    tpl $i
done
}}}



=== 主备 master-standby ===

仅做参考，具体问题具体学习分析。

主机 postgresql.conf
{{{
wal_level = hot_standby
max_wal_senders = 8
}}}

主机 pg_hba.conf 不要漏了
{{{
host    replication all         172.16.16.0/24        trust
}}}

备机 postgresql.conf

{{{
hot_standby = on
}}}

备机 recovery.conf
{{{
standby_mode = on
primary_conninfo = 'host=<MASTER_HOST>'
}}}

初始化操作
{{{
# -> psql
$ -> shell

# select pg_start_backup('flag_name');
$ tar czf /tmp/pg_bak.tgz data/

把 pg_bak.tgz 拷贝到备机, 解压, 当作备机的数据库主目录, 修改好配置文件, 启动备机. 最后, 主机结束备份状态:

# select pg_stop_backup();
}}}
